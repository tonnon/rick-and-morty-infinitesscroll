{"version":3,"sources":["assets/logo.png","components/Table/tableStyled.js","components/Navbar/navbarStyled.js","components/Navbar/Navbar.js","components/Table/Table.js","components/useCharLoad.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","CardGrid","styled","ul","loading","Card","li","spinnerAnimation","keyframes","Spinner","div","NavBar","Navbar","src","logo","alt","width","Table","useState","pageNumber","setPageNumber","setLoading","error","setError","characters","setCharacters","hasMore","setHasMore","useEffect","cancel","axios","method","url","params","page","cancelToken","CancelToken","c","then","res","prevCharacters","Set","data","results","catch","e","isCancel","useCharLoad","observer","useRef","lastChar","useCallback","node","current","disconnect","IntersectionObserver","entries","isIntersecting","prevPageNumber","observe","className","map","character","index","length","key","ref","image","name","id","species","status","origin","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b8d7b2ec.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.700ea584.png\";","import styled, { keyframes } from 'styled-components';\r\n\r\nexport const CardGrid = styled.ul`\r\n  display: ${({ loading }) => (loading ? 'block' : 'grid')};\r\n  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\r\n  grid-gap: 15px;\r\n  margin-top: 40px;\r\n`;\r\n\r\nexport const Card = styled.li`\r\n  color: #fff;\r\n  background: #7159c1;\r\n  margin: 10px;\r\n  border-radius: 10px;\r\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.12), 0 1px 2px rgba(0, 0, 0, 0.24);\r\n  transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);\r\n  cursor: pointer;\r\n  position: relative;\r\n  :hover {\r\n    box-shadow: 0 14px 28px rgba(0, 0, 0, 0.25), 0 10px 10px rgba(0, 0, 0, 0.22);\r\n  }\r\n  img {\r\n    width: 100%;\r\n    border-radius: 10px 10px 0 0;\r\n  }\r\n  section {\r\n    header {\r\n      padding: 5px 0 10px 10px;\r\n      h3 {\r\n        span {\r\n          background: rgba(33, 216, 255, 0.8);\r\n          color: #fff;\r\n          border-radius: 3px;\r\n          padding: 0 6px;\r\n        }\r\n      }\r\n      h3 {\r\n        color: #fff;\r\n        margin-top: 5px;\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst spinnerAnimation = keyframes`\r\n  0% {\r\n      transform: translate3d(-50%, -50%, 0) rotate(0deg);\r\n  }\r\n  100% {\r\n        transform: translate3d(-50%, -50%, 0) rotate(360deg);\r\n  }\r\n`;\r\n\r\nexport const Spinner = styled.div`\r\n  height: 100vh;\r\n  opacity: 1;\r\n  position: relative;\r\n  transition: opacity linear 0.1s;\r\n  &::before {\r\n    animation: 2s linear infinite ${spinnerAnimation};\r\n    border: solid 3px #7159c1;\r\n    border-bottom-color: #21d8ff;\r\n    border-radius: 50%;\r\n    content: '';\r\n    height: 40px;\r\n    left: 50%;\r\n    opacity: inherit;\r\n    position: absolute;\r\n    top: 25%;\r\n    transform: translate3d(-50%, -50%, 0);\r\n    transform-origin: center;\r\n    width: 40px;\r\n    will-change: transform;\r\n  }\r\n`;","import styled from 'styled-components';\r\n\r\n\r\nexport const NavBar = styled.div`\r\n    width: 100%;\r\n    background: #111111;\r\n    height: auto;\r\n    box-shadow: 0 5px 30px rgba(255, 255, 255, 0.25), 0 5px 10px rgba(255, 255, 255, 0.22);\r\n    display:flex;\r\n    align-items: center;\r\n    padding: 10px 0 10px 0;\r\n    justify-content: center;\r\n        img {\r\n            width: 250px;\r\n        }\r\n`;","import React from 'react';\r\nimport { NavBar } from './navbarStyled.js';\r\nimport logo from '../../assets/logo.png'\r\n\r\nconst Navbar = () => {\r\n    return (\r\n      <NavBar>\r\n          <img src={logo} alt=\"logo\" width=\"20px\"/>\r\n      </NavBar>\r\n    );\r\n};\r\n\r\nexport default Navbar;","import React, { useState, useRef, useCallback } from 'react';\r\nimport { CardGrid, Card, Spinner } from './tableStyled.js';\r\nimport Navbar from '../Navbar/Navbar.js';\r\n/* import api from '../../services/api.js'; */\r\nimport useCharLoad from '../useCharLoad.js'\r\n\r\nconst Table = () => {\r\n  const [pageNumber, setPageNumber] = useState(1);\r\n  const {characters, hasMore, loading, error} = useCharLoad( pageNumber)\r\n\r\n  const observer = useRef()\r\n  const lastChar = useCallback(node => {\r\n    if(loading) return\r\n    if(observer.current) observer.current.disconnect()\r\n    observer.current = new IntersectionObserver(entries => {\r\n      if(entries[0].isIntersecting){\r\n        setPageNumber(prevPageNumber => prevPageNumber + 1)\r\n      }\r\n    })\r\n    if (node) observer.current.observe(node)\r\n  }, [loading, hasMore])\r\n  \r\n  return (\r\n    <div className=\"container\">\r\n      <Navbar/>\r\n        <CardGrid>\r\n        {characters.map((character, index) => {\r\n          if(characters.length === index + 1){\r\n            return <Card key={index} ref={lastChar}>\r\n            <img src={character.image} alt={character.name} />\r\n            <section>\r\n              <header>\r\n                <h3>\r\n                  <span>{character.id}</span> {character.name}\r\n                </h3>\r\n                <h4>\r\n                  <span>{character.species} - {character.status}</span>\r\n                </h4>\r\n                <h4>\r\n                  <span>{character.origin.name}</span>\r\n                </h4>\r\n              </header>\r\n            </section>\r\n          </Card>\r\n          } else {\r\n            return <Card key={index}>\r\n            <img src={character.image} alt={character.name} />\r\n            <section>\r\n              <header>\r\n                <h3>\r\n                  <span>{character.id}</span> {character.name}\r\n                </h3>\r\n                <h4>\r\n                  <span>{character.species} - {character.status}</span>\r\n                </h4>\r\n                <h4>\r\n                  <span>{character.origin.name}</span>\r\n                </h4>\r\n              </header>\r\n            </section>\r\n          </Card>\r\n          }\r\n        })}\r\n      </CardGrid>\r\n        <div>{loading && <Spinner/>}</div>\r\n        <div>{error && 'Error...'}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Table;","import { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nexport default function useCharLoad(pageNumber){\r\n  const [loading, setLoading] = useState(true)\r\n  const [error, setError] = useState(false)\r\n  const [characters, setCharacters] = useState([])\r\n  const [hasMore, setHasMore] = useState(false)\r\n\r\n  useEffect(() => {\r\n    setCharacters([])\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    setLoading(true)\r\n    setError(false)\r\n    let cancel\r\n    axios({\r\n      method: 'GET',\r\n      url: 'https://rickandmortyapi.com/api/character/',\r\n      params: {page: pageNumber},\r\n      cancelToken: new axios.CancelToken(c => cancel = c)\r\n    }).then(res => {\r\n      setCharacters(prevCharacters => {\r\n        return [...new Set([...prevCharacters, ...res.data.results])]\r\n      })\r\n      setHasMore(res.data.results > 0)\r\n      setLoading(false)\r\n    }).catch(e => {\r\n      if(axios.isCancel(e)) return\r\n      setError(true)\r\n    })\r\n    return () => cancel()\r\n  }, [pageNumber])\r\n  return {loading, error, characters, hasMore}\r\n}","import React from 'react';\nimport './App.css';\nimport Table from './components/Table/Table.js';\n\nconst App = () => {\n  return (\n    <Table/>\n    )\n  };\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}