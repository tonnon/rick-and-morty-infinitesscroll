{"version":3,"sources":["assets/logo.png","components/Navbar/Navbar.js","services/api.js","components/List/List.js","routes/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","className","src","logo","alt","width","api","axios","create","baseURL","getPage","direction","actualpage","nextPage","parseInt","List","match","useState","characters","setCharacters","clickablePages","Number","params","page","map","number","useEffect","a","get","apiResponse","data","results","loadData","to","pageNumber","key","undefined","character","id","image","name","species","status","Routes","path","exact","component","App","React","Component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0GAAAA,EAAOC,QAAU,IAA0B,kC,6SCW5BC,EARA,WACX,OACE,yBAAKC,UAAU,UACX,yBAAKC,IAAKC,IAAMC,IAAI,OAAOC,MAAM,W,QCA5BC,E,OAJHC,EAAMC,OAAO,CACvBC,QAAS,+CCQLC,EAAU,SAACC,EAAWC,GAC1B,IAAMC,EAAWC,SAASF,EAAY,IAAMD,EAC5C,OAAOE,GAAY,EAAIA,EAAW,GA2DrBE,EAxDF,SAAC,GAAc,IAVDH,EAUXI,EAAW,EAAXA,MAAW,EACWC,mBAAS,IADpB,mBAClBC,EADkB,KACNC,EADM,KAEnBC,GAZmBR,EAYgBS,OAAOL,EAAMM,OAAOC,OAAS,EAXtD,CAAC,EAAG,EAAG,EAAG,EAAG,GACdC,KAAI,SAAAC,GAAM,OAAIX,SAASF,EAAY,IAAMa,MAWlDF,EAAOF,OAAOL,EAAMM,OAAOC,OAAS,EAYxC,OAVFG,qBAAU,WAAM,4CACd,4BAAAC,EAAA,sEAC4BrB,EAAIsB,IAAJ,iBAAkBL,IAD9C,OACQM,EADR,OAGEV,EAAcU,EAAYC,KAAKC,SAHjC,4CADc,uBAAC,WAAD,wBAOdC,KACC,CAAChB,EAAMM,OAAOC,KAAMA,IAGnB,yBAAKtB,UAAU,aACb,kBAAC,EAAD,MACA,yBAAKA,UAAU,UACb,wBAAIA,UAAU,uBACZ,kBAAC,IAAD,CAAMgC,GAAE,WAAMvB,GAAS,EAAGa,KACxB,wBAAItB,UAAU,aAAd,WAEDmB,EAAeI,KAAI,SAAAU,GAAU,OAC5B,kBAAC,IAAD,CAAMD,GAAE,WAAMC,GAAcC,IAAKD,GAC/B,wBAAIjC,UAAU,aAAaW,WAAYW,EAAO,OAAIa,GAC/CF,OAIP,kBAAC,IAAD,CAAMD,GAAE,WAAMvB,EAAQ,EAAGa,KACvB,wBAAItB,UAAU,aAAd,aAIN,wBAAIA,UAAU,YACXiB,EAAWM,KAAI,SAAAa,GAAS,OACrB,wBAAIF,IAAKE,EAAUC,GAAIrC,UAAU,QAC/B,yBAAKC,IAAKmC,EAAUE,MAAOnC,IAAKiC,EAAUG,OAC1C,iCACE,gCACE,4BACE,8BAAOH,EAAUC,IADnB,IAC+BD,EAAUG,MAEzC,4BACE,8BAAOH,EAAUI,QAAjB,MAA6BJ,EAAUK,eAVrD,OC9CO,SAASC,IACtB,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,UAAUC,OAAK,EAACC,UAAW/B,K,ICDxBgC,E,iLAEjB,OACE,kBAAC,IAAD,KACE,kBAACJ,EAAD,W,GAJyBK,IAAMC,WCKnBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASrC,MACvB,2DCbNsC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.44c9f4aa.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.700ea584.png\";","import React from 'react';\r\nimport './navbar.css';\r\nimport logo from '../../assets/logo.png'\r\nconst Navbar = () => {\r\n    return (\r\n      <div className=\"navbar\">\r\n          <img src={logo} alt=\"logo\" width=\"20px\"/>\r\n      </div>\r\n    );\r\n};\r\n\r\nexport default Navbar;","import axios from 'axios';\r\n\r\nconst api = axios.create({\r\n  baseURL: 'https://rickandmortyapi.com/api/character/',\r\n});\r\n\r\nexport default api;","import React, { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './list.css';\r\nimport Navbar from '../Navbar/Navbar.js';\r\nimport api from '../../services/api.js';\r\n\r\nconst getClickablePages = (actualpage) => {\r\n  const offsets = [0, 1, 2, 3, 4]; // Mostra a quantidade de links em tela\r\n  return offsets.map(number => parseInt(actualpage, 10) + number); // Converte seu primeiro argumento para uma string, analisa, e retorna um inteiro\r\n}\r\n\r\nconst getPage = (direction, actualpage) => {\r\n  const nextPage = parseInt(actualpage, 10) + direction;\r\n  return nextPage >= 0 ? nextPage : 1;\r\n}\r\n\r\nconst List = ({ match }) =>{\r\n  const [characters, setCharacters] = useState([]);\r\n  const clickablePages = getClickablePages(Number(match.params.page) || 1);\r\n  const page = Number(match.params.page) || 1;\r\n\r\n  useEffect(() => {\r\n    async function loadData() {\r\n      const apiResponse = await api.get(`/?page=${page}`);\r\n\r\n      setCharacters(apiResponse.data.results);\r\n    }\r\n\r\n    loadData();\r\n  }, [match.params.page, page]); \r\n\r\n    return (\r\n      <div className=\"container\">\r\n        <Navbar/>\r\n        <div className=\"header\">\r\n          <ul className=\"pageNumberContainer\">\r\n            <Link to={`/${getPage(-1, page)}`}>\r\n              <li className=\"direction\"> prev </li>\r\n            </Link>\r\n            {clickablePages.map(pageNumber => (\r\n              <Link to={`/${pageNumber}`} key={pageNumber}>\r\n                <li className=\"pageNumber\" actualpage={page ? 1 : undefined}>\r\n                  {pageNumber}\r\n                </li>\r\n              </Link>\r\n            ))}\r\n            <Link to={`/${getPage(1, page)}`}>\r\n              <li className=\"direction\"> next </li>\r\n            </Link>\r\n          </ul>\r\n        </div>  \r\n        <ul className=\"cardGrid\">\r\n          {characters.map(character => (\r\n              <li key={character.id} className=\"card\">\r\n                <img src={character.image} alt={character.name} />\r\n                <section>\r\n                  <header>\r\n                    <h3>\r\n                      <span>{character.id}</span> {character.name}\r\n                    </h3>\r\n                    <h4>\r\n                      <span>{character.species} - {character.status}</span>\r\n                    </h4>\r\n                  </header>\r\n                </section>\r\n              </li>\r\n          ))};\r\n        </ul>\r\n      </div>\r\n    );\r\n};\r\n\r\nexport default List;","import React from 'react';\r\nimport { Route, Switch } from 'react-router-dom';\r\n\r\nimport List from '../components/List/List.js';\r\n\r\nexport default function Routes() {\r\n  return (\r\n    <Switch>\r\n      <Route path=\"/:page?\" exact component={List} />\r\n    </Switch>\r\n  );\r\n}","import React from 'react';\nimport './App.css';\n\nimport { BrowserRouter } from 'react-router-dom';\n\nimport Routes from './routes';\n\nexport default class App extends React.Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <Routes />\n      </BrowserRouter>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}