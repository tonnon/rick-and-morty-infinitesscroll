{"version":3,"sources":["assets/logo.png","components/Table/tableStyled.js","components/Navbar/navbarStyled.js","components/Navbar/Navbar.js","services/api.js","components/Table/Table.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","CardGrid","styled","ul","Card","li","NavBar","div","Navbar","src","logo","alt","width","api","axios","create","baseURL","Table","useState","characters","setCharacters","numPages","useEffect","a","i","get","apiResponse","data","results","loadData","className","map","character","key","id","image","name","species","status","origin","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4GAAAA,EAAOC,QAAU,IAA0B,kC,4qCCEpC,IAAMC,EAAWC,IAAOC,GAAV,KAORC,EAAOF,IAAOG,GAAV,K,gYCNV,IAAMC,EAASJ,IAAOK,IAAV,K,iBCSJC,EARA,WACX,OACE,kBAACF,EAAD,KACI,yBAAKG,IAAKC,IAAMC,IAAI,OAAOC,MAAM,W,QCD5BC,E,OAJHC,EAAMC,OAAO,CACvBC,QAAS,+CCgDIC,EA9CD,WAAO,IAAD,EACkBC,mBAAS,IAD3B,mBACXC,EADW,KACCC,EADD,OAECF,mBAAS,CAAC,KAAtBG,EAFW,oBAmBlB,OAfAC,qBAAU,WAAM,4CACd,8BAAAC,EAAA,sDACUC,EAAI,EADd,YACiBA,EAAIH,GADrB,gCAE8BR,EAAIY,IAAI,SAAWD,GAFjD,OAEUE,EAFV,OAGIN,EAAcM,EAAYC,KAAKC,SAHnC,OAC+BJ,IAD/B,2DADc,uBAAC,WAAD,wBAOdK,KACC,CAACR,IAQF,yBAAKS,UAAU,aACb,kBAAC,EAAD,MACA,kBAAC7B,EAAD,KACGkB,EAAWY,KAAI,SAAAC,GAAS,OACrB,kBAAC5B,EAAD,CAAM6B,IAAKD,EAAUE,IACnB,yBAAKzB,IAAKuB,EAAUG,MAAOxB,IAAKqB,EAAUI,OAC1C,iCACE,gCACE,4BACE,8BAAOJ,EAAUE,IADnB,IAC+BF,EAAUI,MAEzC,4BACE,8BAAOJ,EAAUK,QAAjB,MAA6BL,EAAUM,SAEzC,4BACE,8BAAON,EAAUO,OAAOH,aAbtC,OClBSI,EALH,WACV,OACE,kBAAC,EAAD,OCMgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.c6d71cd4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.700ea584.png\";","import styled from 'styled-components';\r\n\r\nexport const CardGrid = styled.ul`\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\r\n  grid-gap: 15px;\r\n  margin-top: 40px;\r\n`;\r\n\r\nexport const Card = styled.li`\r\n  color: #fff;\r\n  background: #7159c1;\r\n  margin: 10px;\r\n  border-radius: 10px;\r\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.12), 0 1px 2px rgba(0, 0, 0, 0.24);\r\n  transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);\r\n  cursor: pointer;\r\n  position: relative;\r\n  :hover {\r\n    box-shadow: 0 14px 28px rgba(0, 0, 0, 0.25), 0 10px 10px rgba(0, 0, 0, 0.22);\r\n  }\r\n  img {\r\n    width: 100%;\r\n    border-radius: 10px 10px 0 0;\r\n  }\r\n  section {\r\n    header {\r\n      padding: 5px 0 10px 10px;\r\n      h3 {\r\n        span {\r\n          background: rgba(33, 216, 255, 0.8);\r\n          color: #fff;\r\n          border-radius: 3px;\r\n          padding: 0 6px;\r\n        }\r\n      }\r\n      h3 {\r\n        color: #fff;\r\n        margin-top: 5px;\r\n      }\r\n    }\r\n  }\r\n`;","import styled from 'styled-components';\r\n\r\n\r\nexport const NavBar = styled.div`\r\n    width: 100%;\r\n    background: #111111;\r\n    height: auto;\r\n    box-shadow: 0 5px 30px rgba(255, 255, 255, 0.25), 0 5px 10px rgba(255, 255, 255, 0.22);\r\n    display:flex;\r\n    align-items: center;\r\n    padding: 10px 0 10px 0;\r\n    justify-content: center;\r\n        img {\r\n            width: 250px;\r\n        }\r\n`;","import React from 'react';\r\nimport { NavBar } from './navbarStyled.js';\r\nimport logo from '../../assets/logo.png'\r\n\r\nconst Navbar = () => {\r\n    return (\r\n      <NavBar>\r\n          <img src={logo} alt=\"logo\" width=\"20px\"/>\r\n      </NavBar>\r\n    );\r\n};\r\n\r\nexport default Navbar;","import axios from 'axios';\r\n\r\nconst api = axios.create({\r\n  baseURL: 'https://rickandmortyapi.com/api/character/',\r\n});\r\n\r\nexport default api;","import React, { useState, useEffect } from 'react';\r\nimport { CardGrid, Card } from './tableStyled.js';\r\nimport Navbar from '../Navbar/Navbar.js';\r\nimport api from '../../services/api.js';\r\n\r\nconst Table = () => {\r\n  const [characters, setCharacters] = useState([]);\r\n  const [numPages] = useState([26]);\r\n\r\n  useEffect(() => {\r\n    async function loadData() {\r\n      for(var i = 0; i < numPages; i++){\r\n        const apiResponse = await api.get(`?page=` + i);\r\n        setCharacters(apiResponse.data.results);\r\n      } \r\n    }\r\n    loadData();\r\n  }, [numPages]); \r\n\r\n  // Não há dependências, irá executar uma vez igual ao componentDidMount()\r\n  \r\n  // Recebe dois parêmetros. Uma função e um array de dependências.\r\n  // Substitui os ciclos de vida do React, porém, são conceitos diferentes\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <Navbar/>\r\n      <CardGrid>\r\n        {characters.map(character => (\r\n            <Card key={character.id}>\r\n              <img src={character.image} alt={character.name} />\r\n              <section>\r\n                <header>\r\n                  <h3>\r\n                    <span>{character.id}</span> {character.name}\r\n                  </h3>\r\n                  <h4>\r\n                    <span>{character.species} - {character.status}</span>\r\n                  </h4>\r\n                  <h4>\r\n                    <span>{character.origin.name}</span>\r\n                  </h4>\r\n                </header>\r\n              </section>\r\n            </Card>\r\n        ))};\r\n      </CardGrid>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Table;","import React from 'react';\nimport './App.css';\nimport Table from './components/Table/Table.js';\n\nconst App = () => {\n  return (\n    <Table/>\n    )\n  };\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}